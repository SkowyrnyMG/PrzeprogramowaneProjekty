{"version":3,"sources":["src/verifyForm.js","src/index.js"],"names":["MIN_NAME_LENGTH","MIN_PASSWORD_LENGTH","verifyNameLength","name","length","verifyInNameSigns","match","ifEmail","email","includes","emailHasDomain","checkPasswordLength","password","ifPasswordUpperCase","toLowerCase","ifPasswordHasNumber","verifyInPasswordSigns","verifyConfirm","confirm","undefined","ifRODOBoolean","rodoBtn","rodoAgreement","document","getElementById","rodoCheck","querySelectorAll","allInputs","submit","querySelector","popup","nameInput","nameInputInfo","emailInput","emailInputInfo","passwordInput","passwordInputInfo","confirmInput","confirmInputInfo","formActionsDatabase","failMsg","rules","inputRules","listenersManager","addEventListener","forEach","part","classList","toggle","preventEmpty","e","ifEmpty","map","input","value","nameStatus","emailStatus","passwordStatus","confirmStatus","preventDefault","popupDisplay","add","setTimeout","remove","changeInputColors","info","color","style","borderColor","nameController","dataBase","infoBox","inputValue","secondInputValue","defaultInfo","placeholder","rulesStatus","inputStatus","rule","index","push","innerHTML","console","log"],"mappings":"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","file":"src.07699626.js","sourceRoot":"..","sourcesContent":["const MIN_NAME_LENGTH = 2;\r\nconst MIN_PASSWORD_LENGTH = 8;\r\n\r\nconst verifyNameLength = name => name.length >= MIN_NAME_LENGTH;\r\nconst verifyInNameSigns = name => !name.match(/\\W+/);\r\nconst ifEmail = email => email.includes('@');\r\nconst emailHasDomain = email => !!email.match(/@\\w+[.]\\w+/);\r\nconst checkPasswordLength = password => password.length >= MIN_PASSWORD_LENGTH;\r\nconst ifPasswordUpperCase = password => password != password.toLowerCase();\r\nconst ifPasswordHasNumber = password => !!password.match(/\\d+/);\r\nconst verifyInPasswordSigns = password => !!password.match(/\\W+/);\r\nconst verifyConfirm = (confirm, password) => {\r\n  return password === confirm && password !== undefined && password !== '';\r\n};\r\nconst ifRODOBoolean = rodoBtn => typeof rodoBtn === 'boolean';\r\n\r\nexport {\r\n  verifyNameLength,\r\n  verifyInNameSigns,\r\n  ifEmail,\r\n  emailHasDomain,\r\n  checkPasswordLength,\r\n  ifPasswordUpperCase,\r\n  ifPasswordHasNumber,\r\n  verifyInPasswordSigns,\r\n  verifyConfirm,\r\n  ifRODOBoolean\r\n};\r\n","// import './styles.css';\r\nimport * as inputRules from './verifyForm';\r\n\r\nconst rodoAgreement = document.getElementById('rodo-agreement');\r\nconst rodoCheck = document.querySelectorAll('.line');\r\nconst allInputs = document.querySelectorAll('form input:not([type=\"checkbox\"])');\r\nconst submit = document.querySelector('.submit');\r\nconst popup = document.querySelector('.popup');\r\n\r\nconst nameInput = document.getElementById('name-input');\r\nconst nameInputInfo = document.querySelector('.name .info');\r\nconst emailInput = document.getElementById('email-input');\r\nconst emailInputInfo = document.querySelector('.email .info');\r\nconst passwordInput = document.getElementById('password-input');\r\nconst passwordInputInfo = document.querySelector('.password .info');\r\nconst confirmInput = document.getElementById('password-input-confirm');\r\nconst confirmInputInfo = document.querySelector('.password-confirm .info');\r\n\r\n// Be careful if you would like to add more verification rules you have to keep the same order in failMsg and rules!\r\nconst formActionsDatabase = {\r\n  name: {\r\n    failMsg: ['Name should be at least 2 signs long!', 'You cannot use special signs in Name!'],\r\n    rules: [inputRules.verifyNameLength, inputRules.verifyInNameSigns]\r\n  },\r\n  email: {\r\n    failMsg: ['Your emain does not have domain!', 'Email should include @ sign!'],\r\n    rules: [inputRules.emailHasDomain, inputRules.ifEmail]\r\n  },\r\n  password: {\r\n    failMsg: [\r\n      'Password should include at least one number!',\r\n      'Password should include at least one special sign!',\r\n      'Password should include at least one uppercase letter!',\r\n      'Password should be at least 8 signs long!'\r\n    ],\r\n    rules: [\r\n      inputRules.ifPasswordHasNumber,\r\n      inputRules.verifyInPasswordSigns,\r\n      inputRules.ifPasswordUpperCase,\r\n      inputRules.checkPasswordLength\r\n    ]\r\n  },\r\n  confirm: {\r\n    failMsg: ['Given passwords do not match!'],\r\n    rules: [inputRules.verifyConfirm]\r\n  }\r\n};\r\n\r\nconst listenersManager = () => {\r\n  rodoAgreement.addEventListener('change', () => {\r\n    rodoCheck.forEach(part => {\r\n      part.classList.toggle('active-opacity');\r\n    });\r\n  });\r\n\r\n  submit.addEventListener('click', preventEmpty);\r\n};\r\n\r\nconst preventEmpty = e => {\r\n  const ifEmpty = [...allInputs].map(input => {\r\n    if (input.value === '') {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  if (\r\n    nameStatus === false ||\r\n    emailStatus === false ||\r\n    passwordStatus === false ||\r\n    confirmStatus === false ||\r\n    ifEmpty.includes(false)\r\n  ) {\r\n    e.preventDefault();\r\n    popupDisplay();\r\n    return;\r\n  }\r\n};\r\n\r\nconst popupDisplay = () => {\r\n  popup.classList.add('popup-active');\r\n  setTimeout(() => {\r\n    popup.classList.remove('popup-active');\r\n  }, 2000);\r\n};\r\n\r\nconst changeInputColors = (input, info, color) => {\r\n  input.style.borderColor = color;\r\n  info.style.color = color;\r\n};\r\n\r\nconst nameController = (dataBase, infoBox, inputValue, secondInputValue) => {\r\n  const defaultInfo = inputValue.placeholder;\r\n  const rules = dataBase.rules;\r\n  const failMsg = dataBase.failMsg;\r\n  const rulesStatus = [];\r\n  let inputStatus = false;\r\n  const FAIL_COLOR = '#F93822';\r\n  const SUCCES_COLOR = '#03AC13';\r\n\r\n  rules.forEach((rule, index) => {\r\n    rulesStatus.push(secondInputValue ? rule(inputValue.value, secondInputValue.value) : rule(inputValue.value));\r\n    if ((secondInputValue ? rule(inputValue.value, secondInputValue.value) : rule(inputValue.value)) === false) {\r\n      infoBox.innerHTML = failMsg[index];\r\n      changeInputColors(inputValue, infoBox, FAIL_COLOR);\r\n    } else {\r\n    }\r\n    if (!rulesStatus.includes(false)) {\r\n      infoBox.innerHTML = defaultInfo;\r\n      changeInputColors(inputValue, infoBox, SUCCES_COLOR);\r\n      inputStatus = true;\r\n    } else {\r\n      inputStatus = false;\r\n    }\r\n  });\r\n  console.log(inputStatus);\r\n  return inputStatus;\r\n};\r\n\r\nlet nameStatus = false;\r\nnameInput.addEventListener('keyup', () => {\r\n  nameStatus = nameController(formActionsDatabase.name, nameInputInfo, nameInput);\r\n});\r\nlet emailStatus = false;\r\nemailInput.addEventListener('keyup', () => {\r\n  emailStatus = nameController(formActionsDatabase.email, emailInputInfo, emailInput);\r\n});\r\nlet passwordStatus = false;\r\npasswordInput.addEventListener('keyup', () => {\r\n  passwordStatus = nameController(formActionsDatabase.password, passwordInputInfo, passwordInput);\r\n});\r\nlet confirmStatus = false;\r\nconfirmInput.addEventListener('keyup', () => {\r\n  confirmStatus = nameController(formActionsDatabase.confirm, confirmInputInfo, confirmInput, passwordInput);\r\n});\r\n\r\nlistenersManager();\r\n"]}